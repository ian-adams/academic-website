<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Demo | Ian T. Adams</title>
    <link>https://ianadamsresearch.com/tag/demo/</link>
      <atom:link href="https://ianadamsresearch.com/tag/demo/index.xml" rel="self" type="application/rss+xml" />
    <description>Demo</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>©`2022`</copyright><lastBuildDate>Wed, 25 Aug 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://ianadamsresearch.com/media/android-chrome-512x512.png</url>
      <title>Demo</title>
      <link>https://ianadamsresearch.com/tag/demo/</link>
    </image>
    
    <item>
      <title>Counting &#34;Select All That Apply&#34; Questions in Qualtrics</title>
      <link>https://ianadamsresearch.com/post/counting-select-all-that-apply-questions-in-qualtrics-using-r/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://ianadamsresearch.com/post/counting-select-all-that-apply-questions-in-qualtrics-using-r/</guid>
      <description>
&lt;script src=&#34;https://ianadamsresearch.com/post/counting-select-all-that-apply-questions-in-qualtrics-using-r/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;qualtrics-messy-data&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Qualtrics Messy Data&lt;/h1&gt;
&lt;p&gt;My friend &lt;a href=&#34;https://www.devoncantwell.com/about-devon&#34;&gt;Devon Cantwell&lt;/a&gt; reached out with an interesting messy data caused by how Qualtrics produces “select all that apply” variables. For example, in her (mock) survey, she asks students to select all the colors that they personally find attractive from a list. When downloaded from Qualtrics, we get a dataframe that looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;glimpse(dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 940
## Columns: 4
## $ color_1 &amp;lt;fct&amp;gt; Sparkle, Blue, Blue, Sparkle, Blue, Sparkle, Sparkle, Green, B~
## $ color_2 &amp;lt;fct&amp;gt; NA, Moldy Book, NA, Moldy Book, Moldy Book, Honey Bee, Moldy B~
## $ color_3 &amp;lt;fct&amp;gt; NA, Apple Core Brown, NA, Apple Core Brown, NA, NA, NA, NA, NA~
## $ color_4 &amp;lt;fct&amp;gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So all students pick at least one color, some pick two, but relatively few pick three or four. One thing we might want to know is the first color selected by respondent? That’s relatively easy:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dat %&amp;gt;% count(color_1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 2
##   color_1              n
##   &amp;lt;fct&amp;gt;            &amp;lt;int&amp;gt;
## 1 Blue               233
## 2 Green              134
## 3 Yellow              14
## 4 Sparkle            189
## 5 Apple Core Brown     6
## 6 Honey Bee           13
## 7 Moldy Book          42
## 8 &amp;lt;NA&amp;gt;               309&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this only tells us the first color selected, not how many times a color was selected. What if we want to count all the instances where “Moldy Book” was selected, across columns? Or getting a more succinct answer for all colors? Because these are not ordered in any way, and the respondent wasn’t asked for an ordered preference, we need to count across the variables.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;tidyr&lt;/code&gt; for a quick solution:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyr)

dat %&amp;gt;%
  gather(key, value, na.rm = TRUE) %&amp;gt;%
  count(value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: attributes are not identical across measure variables;
## they will be dropped&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 2
##   value                n
##   &amp;lt;chr&amp;gt;            &amp;lt;int&amp;gt;
## 1 Apple Core Brown    78
## 2 Blue               233
## 3 Green              134
## 4 Honey Bee           32
## 5 Moldy Book         222
## 6 Sparkle            230
## 7 Yellow              38&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Good thing we checked! It turns out that Sparkle and Moldy Book are basically just as popular as Blue! If we had stopped with just checking the first color picked, our inference for color preference would have been way off.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Testing Netlify hosting with R Markdown</title>
      <link>https://ianadamsresearch.com/post/markdown-testing/testing-netlify-hosting-with-r-markdown/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate>
      <guid>https://ianadamsresearch.com/post/markdown-testing/testing-netlify-hosting-with-r-markdown/</guid>
      <description>
&lt;script src=&#34;https://ianadamsresearch.com/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This report was generated on 2020-12-30, as a demo of &lt;code&gt;textclean&lt;/code&gt; from &lt;a href=&#34;https://github.com/trinker/textclean#check-text&#34; class=&#34;uri&#34;&gt;https://github.com/trinker/textclean#check-text&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an &lt;a href=&#34;http://rmarkdown.rstudio.com&#34;&gt;R Markdown&lt;/a&gt; Notebook. When you execute code within the notebook, the results appear beneath the code.&lt;/p&gt;
&lt;div id=&#34;fast-example-with-created-examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Fast example with created examples&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(&amp;quot;i like&amp;quot;, &amp;quot;&amp;lt;p&amp;gt;i want. &amp;lt;/p&amp;gt;. thet them ther .&amp;quot;, &amp;quot;I am ! that|&amp;quot;, &amp;quot;&amp;quot;, NA, 
    &amp;quot;&amp;amp;quot;they&amp;amp;quot; they,were there&amp;quot;, &amp;quot;.&amp;quot;, &amp;quot;   &amp;quot;, &amp;quot;?&amp;quot;, &amp;quot;3;&amp;quot;, &amp;quot;I like goud eggs!&amp;quot;, 
    &amp;quot;bi\xdfchen Z\xfcrcher&amp;quot;, &amp;quot;i 4like...&amp;quot;, &amp;quot;\\tgreat&amp;quot;,  &amp;quot;She said \&amp;quot;yes\&amp;quot;&amp;quot;)
Encoding(x) &amp;lt;- &amp;quot;latin1&amp;quot;
x &amp;lt;- as.factor(x)
check_text(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## =============
## NON CHARACTER
## =============
## 
## The text variable is not a character column (likely `factor`):
## 
## 
## *Suggestion: Consider using `as.character` or `stringsAsFactors = FALSE` when reading in
##              Also, consider rerunning `check_text` after fixing
## 
## 
## =====
## DIGIT
## =====
## 
## The following observations contain digits/numbers:
## 
## 10, 13
## 
## This issue affected the following text:
## 
## 10: 3;
## 13: i 4like...
## 
## *Suggestion: Consider using `replace_number`
## 
## 
## ========
## EMOTICON
## ========
## 
## The following observations contain emoticons:
## 
## 6
## 
## This issue affected the following text:
## 
## 6: &amp;amp;quot;they&amp;amp;quot; they,were there
## 
## *Suggestion: Consider using `replace_emoticons`
## 
## 
## =====
## EMPTY
## =====
## 
## The following observations contain empty text cells (all white space):
## 
## 1
## 
## This issue affected the following text:
## 
## 1: i like
## 
## *Suggestion: Consider running `drop_empty_row`
## 
## 
## =======
## ESCAPED
## =======
## 
## The following observations contain escaped back spaced characters:
## 
## 14
## 
## This issue affected the following text:
## 
## 14: \tgreat
## 
## *Suggestion: Consider using `replace_white`
## 
## 
## ====
## HTML
## ====
## 
## The following observations contain HTML markup:
## 
## 2, 6
## 
## This issue affected the following text:
## 
## 2: &amp;lt;p&amp;gt;i want. &amp;lt;/p&amp;gt;. thet them ther .
## 6: &amp;amp;quot;they&amp;amp;quot; they,were there
## 
## *Suggestion: Consider running `replace_html`
## 
## 
## ==========
## INCOMPLETE
## ==========
## 
## The following observations contain incomplete sentences (e.g., uses ending punctuation like &amp;#39;...&amp;#39;):
## 
## 13
## 
## This issue affected the following text:
## 
## 13: i 4like...
## 
## *Suggestion: Consider using `replace_incomplete`
## 
## 
## =============
## MISSING VALUE
## =============
## 
## The following observations contain missing values:
## 
## 5
## 
## *Suggestion: Consider running `drop_NA`
## 
## 
## ========
## NO ALPHA
## ========
## 
## The following observations contain elements with no alphabetic (a-z) letters:
## 
## 4, 7, 8, 9, 10
## 
## This issue affected the following text:
## 
## 4: 
## 7: .
## 8:    
## 9: ?
## 10: 3;
## 
## *Suggestion: Consider cleaning the raw text or running `filter_row`
## 
## 
## ==========
## NO ENDMARK
## ==========
## 
## The following observations contain elements with missing ending punctuation:
## 
## 1, 3, 4, 6, 8, 10, 12, 14, 15
## 
## This issue affected the following text:
## 
## 1: i like
## 3: I am ! that|
## 4: 
## 6: &amp;amp;quot;they&amp;amp;quot; they,were there
## 8:    
## 10: 3;
## 12: bißchen Zürcher
## 14: \tgreat
## 15: She said &amp;quot;yes&amp;quot;
## 
## *Suggestion: Consider cleaning the raw text or running `add_missing_endmark`
## 
## 
## ====================
## NO SPACE AFTER COMMA
## ====================
## 
## The following observations contain commas with no space afterwards:
## 
## 6
## 
## This issue affected the following text:
## 
## 6: &amp;amp;quot;they&amp;amp;quot; they,were there
## 
## *Suggestion: Consider running `add_comma_space`
## 
## 
## =========
## NON ASCII
## =========
## 
## The following observations contain non-ASCII text:
## 
## 12
## 
## This issue affected the following text:
## 
## 12: bißchen Zürcher
## 
## *Suggestion: Consider running `replace_non_ascii`
## 
## 
## ==================
## NON SPLIT SENTENCE
## ==================
## 
## The following observations contain unsplit sentences (more than one sentence per element):
## 
## 2, 3
## 
## This issue affected the following text:
## 
## 2: &amp;lt;p&amp;gt;i want. &amp;lt;/p&amp;gt;. thet them ther .
## 3: I am ! that|
## 
## *Suggestion: Consider running `textshape::split_sentence`&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;and-if-all-is-well-the-user-should-be-greeted-by-a-cow&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;And if all is well the user should be greeted by a cow:&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y &amp;lt;- c(&amp;quot;A valid sentence.&amp;quot;, &amp;quot;yet another!&amp;quot;)
check_text(y)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  ------------- 
## No problems found!
## This text is virtuosic! 
##  ---------------- 
##   \   ^__^ 
##    \  (oo)\ ________ 
##       (__)\         )\ /\ 
##            ||------w|
##            ||      ||&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;row-filtering&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Row Filtering&lt;/h2&gt;
&lt;p&gt;It is useful to drop/remove empty rows or unwanted rows (for example the researcher dialogue from a transcript). The &lt;code&gt;drop_empty_row&lt;/code&gt; &amp;amp; &lt;code&gt;drop_row&lt;/code&gt; do empty row do just this. First I’ll demo the removal of empty rows.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## create a data set wit empty rows
(dat &amp;lt;- rbind.data.frame(DATA[, c(1, 4)], matrix(rep(&amp;quot; &amp;quot;, 4), 
    ncol =2, dimnames=list(12:13, colnames(DATA)[c(1, 4)]))))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        person                                 state
## 1         sam         Computer is fun. Not too fun.
## 2        greg               No it&amp;#39;s not, it&amp;#39;s dumb.
## 3     teacher                    What should we do?
## 4         sam                  You liar, it stinks!
## 5        greg               I am telling the truth!
## 6       sally                How can we be certain?
## 7        greg                      There is no way.
## 8         sam                       I distrust you.
## 9       sally           What are you talking about?
## 10 researcher         Shall we move on?  Good then.
## 11       greg I&amp;#39;m hungry.  Let&amp;#39;s eat.  You already?
## 12                                                 
## 13&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;drop_empty_row(dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        person                                 state
## 1         sam         Computer is fun. Not too fun.
## 2        greg               No it&amp;#39;s not, it&amp;#39;s dumb.
## 3     teacher                    What should we do?
## 4         sam                  You liar, it stinks!
## 5        greg               I am telling the truth!
## 6       sally                How can we be certain?
## 7        greg                      There is no way.
## 8         sam                       I distrust you.
## 9       sally           What are you talking about?
## 10 researcher         Shall we move on?  Good then.
## 11       greg I&amp;#39;m hungry.  Let&amp;#39;s eat.  You already?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we drop out rows. The &lt;code&gt;drop_row&lt;/code&gt; function takes a data set, a column (named or numeric position) and regex terms to search for. The &lt;code&gt;terms&lt;/code&gt; argument takes regex(es) allowing for partial matching. &lt;code&gt;terms&lt;/code&gt; is case sensitive but can be changed via the &lt;code&gt;ignore.case&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;drop_row(dataframe = DATA, column = &amp;quot;person&amp;quot;, terms = c(&amp;quot;sam&amp;quot;, &amp;quot;greg&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       person sex adult                         state code
## 1    teacher   m     1            What should we do?   K3
## 2      sally   f     0        How can we be certain?   K6
## 3      sally   f     0   What are you talking about?   K9
## 4 researcher   f     1 Shall we move on?  Good then.  K10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;drop_row(DATA, 1, c(&amp;quot;sam&amp;quot;, &amp;quot;greg&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       person sex adult                         state code
## 1    teacher   m     1            What should we do?   K3
## 2      sally   f     0        How can we be certain?   K6
## 3      sally   f     0   What are you talking about?   K9
## 4 researcher   f     1 Shall we move on?  Good then.  K10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;keep_row(DATA, 1, c(&amp;quot;sam&amp;quot;, &amp;quot;greg&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   person sex adult                                 state code
## 1    sam   m     0         Computer is fun. Not too fun.   K1
## 2   greg   m     0               No it&amp;#39;s not, it&amp;#39;s dumb.   K2
## 3    sam   m     0                  You liar, it stinks!   K4
## 4   greg   m     0               I am telling the truth!   K5
## 5   greg   m     0                      There is no way.   K7
## 6    sam   m     0                       I distrust you.   K8
## 7   greg   m     0 I&amp;#39;m hungry.  Let&amp;#39;s eat.  You already?  K11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;drop_row(DATA, &amp;quot;state&amp;quot;, c(&amp;quot;Comp&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        person sex adult                                 state code
## 1        greg   m     0               No it&amp;#39;s not, it&amp;#39;s dumb.   K2
## 2     teacher   m     1                    What should we do?   K3
## 3         sam   m     0                  You liar, it stinks!   K4
## 4        greg   m     0               I am telling the truth!   K5
## 5       sally   f     0                How can we be certain?   K6
## 6        greg   m     0                      There is no way.   K7
## 7         sam   m     0                       I distrust you.   K8
## 8       sally   f     0           What are you talking about?   K9
## 9  researcher   f     1         Shall we move on?  Good then.  K10
## 10       greg   m     0 I&amp;#39;m hungry.  Let&amp;#39;s eat.  You already?  K11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;drop_row(DATA, &amp;quot;state&amp;quot;, c(&amp;quot;I &amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       person sex adult                                 state code
## 1        sam   m     0         Computer is fun. Not too fun.   K1
## 2       greg   m     0               No it&amp;#39;s not, it&amp;#39;s dumb.   K2
## 3    teacher   m     1                    What should we do?   K3
## 4        sam   m     0                  You liar, it stinks!   K4
## 5      sally   f     0                How can we be certain?   K6
## 6       greg   m     0                      There is no way.   K7
## 7      sally   f     0           What are you talking about?   K9
## 8 researcher   f     1         Shall we move on?  Good then.  K10
## 9       greg   m     0 I&amp;#39;m hungry.  Let&amp;#39;s eat.  You already?  K11&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;drop_row(DATA, &amp;quot;state&amp;quot;, c(&amp;quot;you&amp;quot;), ignore.case = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       person sex adult                         state code
## 1        sam   m     0 Computer is fun. Not too fun.   K1
## 2       greg   m     0       No it&amp;#39;s not, it&amp;#39;s dumb.   K2
## 3    teacher   m     1            What should we do?   K3
## 4       greg   m     0       I am telling the truth!   K5
## 5      sally   f     0        How can we be certain?   K6
## 6       greg   m     0              There is no way.   K7
## 7 researcher   f     1 Shall we move on?  Good then.  K10&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
